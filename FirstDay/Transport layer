传输层
{
    提供服务:进程之间的逻辑通信、复用和分用、差错检测、面向连接的TCP和无连接的UDP
    {
        传输层是进程之间，网络层是主机之间
        
        复用 是发送发不同应用的进程都可以使用同一个传输协层协议来传送数据
        分用 是接收方的传输层在剥去报文的首部后能够把这些数据正确的交付到目的应用进程
        
        差错检测：首部和数据部分
        
        端口号
        {
            常用的端口号
            {
                FTP：    21
                TELNET： 23
                SMTP：   25
                DNS：    53
                TETP：   69
                HTTP：   80
                SNMP：   161
            }
            
            客户端 使用的 端口号数值为 49152 ～ 65535
        }
        
        套接字 = （主机IP地址，端口号），它唯一的标识网络中的一个主机和其上的一个应用（进程）
     
    
    }
    UDP协议
    {
        用途：小文件传送协议（TFTP）、DNS、SNMP和实时协议RTP
        
        特点：无连接、首部开销小、最大努力交付，应用层要保证可靠性
        
        首部：8bit，分别为源端口号、目的端口号、长度、检验和
        {
            16位源端口号、16位目的端口号
            16位UDP长度、16位UDP检验和
        }
        
        校验：采用首部、伪首部、数据进行二进制反码运算求和再取反
    }
    
    TCP协议
    {
        用途：文件传输协议（FTP）、超文本传输协议（HTTP）、远程登录（TELNET）
        
        特点：有链接、一对一、提供可靠交付、全双工通信、面向字节流
        
        首部：20B，源端口、目的端口、序号、确认号等控制信息
        {
             源端口号：2 byte
             
             目的端口：
             
             序号字段：  4byte 面向字节流的，所以传送的每个字节都要编上序号，为该字段第一个字节的序号 (seq)
             
             确认号字段：4byte 期望收到对方下一个报文段的数据的第一个字节的序号                     (ack)
             
             数据偏移：  4bit 表示首部长度，该字段为15时，表示首部最大长度60byte，因为偏移单位为4byte
             
             保留字段：  6bit 保留为以后用
             
             紧急位URG： URG = 1时表示紧急指针字段有效，有紧急数据，应尽快传送
             
             确认位ACK： ACK = 1时确认号字段有效
             
             推送位PSH： PSH = 1时，就尽快交付接受应用进程，而不是等到整个缓存满了再向上交付
             
             复位位RST： RST = 1时，表示有严重差错，必须释放连接
             
             同部位SYN： SYN = 1时，表示这是一个连接请求或连接接收报文
             
             终止位FIN： FIN = 1时，表示此报文段发送方的数据已经发送完了，并要求释放传输连接
             
             窗口字段：  2byte 指出现在允许对方发送的数据量，单位为字节
             
             检验和：    2byte 
             
             紧急指针字段：16bit 指出在本报文段中紧急数据共有多少字节（紧急数据放在本报文段数据的最前面）
             
             选项字段：  MSS最大数据字段长度
             
             填充字段：  为了使整个首部长度为4byte的整数倍
        }
        
        连接管理：三次握手建立，四次挥手释放
        {
            三次握手
            {
                SYN = 1，seq = x
                SYN = 1, ACK = 1, seq = y, ack = x + 1
                ACK = 1, seq = x + 1,ack = y + 1
                
            }
            四次挥手
            {
                FIN = 1,seq = u
                ACK = 1,seq = v,ack = u + 1
                FIN = 1,ACK = 1,seq = w,ack = u + 1
                ACk = 1,seq = u + 1,ack = w + 1
                经过时间等待计时器设置的时间2MSL后，才关闭---------------
            }
        
        }
        
        可靠传输机制
        {
            检验：
            
            序号：用来保证数据能有效提交给应用层
            
            确认：确认号为期待收到的下一个报文段第一个字节的序号
            
            重传
            {
                超时：计时器到期还没收到确认则重传对应报文
                
                冗余确认：当收到失序报文时向发送端发送冗余ＡＣＫ
            ｝
        }
        
        流量控制：在确认报文中设置接受窗口rwndla的值来限制发送速率
        
        拥塞控制
        {
            原理：根据自己估算的网络拥塞成都设置cwnd的值来限制发送速率
            
            方法
            {
                慢开始：当cwnd < ssthresh 时，每收到一个报文段的确认cwnd 加1
                
                拥塞避免：当cwnd > ssthresh 时，每经过一个往返延时cwnd加1
                
                快重传：当收到连续的三个重复的ACK，直接重传对方期待的报文
                
                快恢复：当收到连续的三个冗余ACK，令ssthresh = cwnd = cwnd/2
            }
            拥塞处理：ssthresh置为原cwnd的一半，cwnd置1
        }
    } 

}
